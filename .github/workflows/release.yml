name: Release CI

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: 打包构建 Electron 应用
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            script: build:mac
            label: mac
            ext: dmg

          - platform: windows-latest
            script: build:win
            label: win
            ext: exe

    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      # 拉取代码
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 生成时间戳版本号
      - name: 生成时间戳版本号
        id: version
        shell: bash
        run: |
          TIMESTAMP=$(date -u +"%Y%m%d%H%M%S")
          VERSION="0.0.0-dev.${TIMESTAMP}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "生成版本号: ${VERSION}"

      # 安装 Node.js
      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # 安装 pnpm
      - name: 安装 pnpm
        run: npm install -g pnpm

      # 安装依赖
      - name: 安装依赖
        run: pnpm install

      # 更新 package.json 版本号
      - name: 更新版本号
        shell: bash
        run: |
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json'));pkg.version='${{ steps.version.outputs.version }}';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));"
          echo "已更新 package.json 版本为: ${{ steps.version.outputs.version }}"

      # 执行打包脚本（如 pnpm run build:win 或 build:mac）
      - name: 执行构建脚本
        run: pnpm run ${{ matrix.script }}

      # 上传构建产物供后续使用
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: copicseal-${{ matrix.label }}
          path: |
            dist/*.${{ matrix.ext }}
            dist/*.yml
            dist/*.blockmap
            dist/*.zip
            !dist/builder-debug.yml
            !dist/builder-effective-config.yaml

  release:
    name: 发布到 GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 生成时间戳版本号
        id: version
        run: |
          TIMESTAMP=$(date -u +"%Y%m%d%H%M%S")
          VERSION="0.0.1-dev.${TIMESTAMP}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "生成版本号: ${VERSION}"

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 查看文件结构
        run: ls -R artifacts

      - name: 上传到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            自动构建版本

            构建时间: ${{ steps.version.outputs.timestamp }}
            提交: ${{ github.sha }}
            分支: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.exe
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.yml
            artifacts/**/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
